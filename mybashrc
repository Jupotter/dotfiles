#!/bin/bash
#see http://tldp.org/LDP/abs/html/sample-bashrc.html for more

#if [ -f /etc/bashrc ]; then
#       . /etc/bashrc
#fi

shopt -s histappend

txtblk='\e[0;30m' # Black - Regular
txtred='\e[0;31m' # Red
txtgrn='\e[0;32m' # Green
txtylw='\e[0;33m' # Yellow
txtblu='\e[0;34m' # Blue
txtpur='\e[0;35m' # Purple
txtcyn='\e[0;36m' # Cyan
txtwht='\e[0;37m' # White

bldblk='\e[1;30m' # Black - Bold
bldred='\e[1;31m' # Red
bldgrn='\e[1;32m' # Green
bldylw='\e[1;33m' # Yellow
bldblu='\e[1;34m' # Blue
bldpur='\e[1;35m' # Purple
bldcyn='\e[1;36m' # Cyan
bldwht='\e[1;37m' # White

drkblk='\e[2;30m' # Black - Dark
drkred='\e[2;31m' # Red
drkgrn='\e[2;32m' # Green
drkylw='\e[2;33m' # Yellow
drkblu='\e[2;34m' # Blue
drkpur='\e[2;35m' # Purple
drkcyn='\e[2;36m' # Cyan
drkwht='\e[2;37m' # White

unkblk='\e[4;30m' # Black - Underline
undred='\e[4;31m' # Red
undgrn='\e[4;32m' # Green
undylw='\e[4;33m' # Yellow
undblu='\e[4;34m' # Blue
undpur='\e[4;35m' # Purple
undcyn='\e[4;36m' # Cyan
undwht='\e[4;37m' # White

bakblk='\e[40m'   # Black - Background
bakred='\e[41m'   # Red
badgrn='\e[42m'   # Green
bakylw='\e[43m'   # Yellow
bakblu='\e[44m'   # Blue
bakpur='\e[45m'   # Purple
bakcyn='\e[46m'   # Cyan
bakwht='\e[47m'   # White
txtrst='\e[0m'    # Text Reset

mybin="~/.bin:"
export PATH="${mybin}${PATH#$mybin}"
export PATHSET=""
export HISTCONTROL=ignoreboth
export HISTSIZE=10000
export NETHACKOPTIONS=""
export EDITOR="vim"
export PAGER=less
export LESSOPEN='|/usr/bin/lesspipe.sh %s 2>&-'
export LESS='-i -w -J -z-4 -g -M -X -F -R -P%t?f%f \
:stdin .?pb%pb\%:?lbLine %lb:?bbByte %bb:-...'

if command -v vimpager >/dev/null 2>&1; then
    export PAGER=vimpager
fi

export NNTPSERVER='news.epita.fr'

export MYCFLAGS='-Wextra -Wall -Werror -std=c99 -pedantic'

export MYCXXFLAGS='-Wextra -Wall -Werror'

export SCFLAGS='-Wall -Wextra -std=c99 -pedantic \
-Wfloat-equal -Wundef -Wshadow -Wpointer-arith \
-Wbad-function-cast -Wcast-qual -Wcast-align \
-Waggregate-return -Wstrict-prototypes \
-Wmissing-prototypes \
-Wmissing-declarations -Wnested-externs \
-Wunreachable-code -DDEBUG -g -ggdb'

alias gccflags="gcc $SCFLAGS"

alias valgrind='valgrind -v --leak-check=full --show-reachable=yes \
    --track-fds=yes --track-origins=yes --malloc-fill=42 --free-fill=43'

function m {
        $@ | less
}

function silence {
        $@ > /dev/null 2>/dev/null;
}

function genpasswd() {
        local l=$1
                [ "$1" == "" ] && l=16
                tr -dc A-Za-z0-9_ < /dev/urandom | head -c ${l} | xargs
}


source ~/dotfiles/git-prompt.sh
GIT_PS1_SHOWDIRTYSTATE='enable'
GIT_PS1_SHOWUNTRACKEDFILES='enable'

color(){
    echo "\\e[38;5;$1m\\e[48;5;$2m"
}

sucolor(){
    if [[ $EUID -ne 0 ]]; then
        echo "\\e[38;5;$1m\\e[48;5;$2m"
    else
        echo "\\e[38;5;0m\\e[48;5;196m"
    fi
}

prompt_powerline_status(){
    if [ $1 -eq 0 ]; then
        echo -e "\\e[0m\\e[38;5;$2m\0342\0256\0200"
    else
        echo -e "$(color $2 160)\0342\0256\0200\
$(color 255 160) $1 \\e[0m\\e[38;5;160m\0342\0256\0200"
    fi
}

function prompt_command(){
ret=$?
[ -n "$TMUX" ] &&
    tmux setenv TMUXPWD_$(tmux display -p "#I_#P") "$PWD"
}

function prompt(){
case $1 in
    light | 0)
PS1="\[$bldgrn\]\u@\H\[$txtrst\]:\[$bldblu\]\W\[$txtrst\]$ ";;
    classic | 1)
PS1="\n\[$bldwht\]\
\342\224\214(\[$bldblu\]\w\[$bldwht\])\
\342\224\200(\[$bldred\]\$?\[$bldwht\])\
\$(__git_ps1 \"\342\224\200(\[$bldblu\]%s\[$bldwht\])\")\n\
\342\224\224\342\224\200(\[$bldgrn\]\u\[$bldwht\])\342\224\200\$\[$txtrst\] "
;;
    power | 2)
        if [[ $EUID -ne 0 ]]; then ucolor=148; else ucolor=196; fi
PS1="\n\
\[$(color 0 $ucolor) \u $(color $ucolor 240)\342\256\200\
\[\e[1;37m$(color 231 240) \w\e[0m$(color 231 240) \
\$(prompt_powerline_status \$ret 240)\]\n\
\[$bldwht\] \$ \[$txtrst\]"
;;
esac
PROMPT_COMMAND=prompt_command
}

if [[ $TERM = 'screen-256color' ]]; then
    prompt power
else
    prompt classic
fi

alias AUTHORS="echo '* garagn_j' > AUTHORS"
alias cd..='cd ..'
alias cd~='cd ~'
alias s='silence'
alias rm='rm -I'
alias cp='cp -i'
alias mv='mv -i'
alias mkdir='mkdir -p'
alias cl='clear'
alias ping='ping -c 5'
alias more='less'
alias z='clear && zlock -immed'
alias please='sudo'
alias v='vim'
alias tmux='tmux -2'
alias q='exit'
alias e='vim'

alias stc='/u/all/acu/public/stc'

alias pacman='yaourt'

##### tar aliases #####

alias tarbz='tar cvzf'
alias targz='tar cvjf'
alias untar='tar xvf'
alias tarll='tar vtf'

##### ls aliases #####

alias l='ls'
alias ls='ls --color'
alias lsl='m ls --color'
alias ll='ls -lh --color'
alias lll='m ls -lh --color'
alias la='ls -lah --color'
alias lal='m ls -lah --color'
alias tree='tree -Csup --charset=utf8'
alias treel='m tree -Csup'

function mkcd {
        mkdir $1 && cd $1
}

function firefox() { command firefox "$@" & }
function xpdf() { command xpdf "$@" & }

source ~/dotfiles/git-completion.bash

#=========================================================================
# PROGRAMMABLE COMPLETION - ONLY SINCE BASH-2.04
# Most are taken from the bash 2.05 documentation and from Ian McDonald's
# 'Bash completion' package (http://www.caliban.org/bash/#completion).
# You will in fact need bash more recent than 3.0 for some features.
#=========================================================================

if [ "${BASH_VERSION%.*}" \< "3.0" ]; then
    echo "You will need to upgrade to version 3.0 \
for full programmable completion features."
    return
fi

shopt -s extglob         # Necessary,
#set +o nounset          # otherwise some completions will fail.

complete -A hostname   rsh rcp telnet rlogin r ftp ping disk
complete -A export     printenv
complete -A variable   export local readonly unset
complete -A enabled    builtin
complete -A alias      alias unalias
complete -A function   function
complete -A user       su mail finger

complete -A helptopic  help     # Currently, same as builtins.
complete -A shopt      shopt
complete -A stopped -P '%' bg
complete -A job -P '%'     fg jobs disown

complete -A directory  mkdir rmdir
complete -A directory   -o default cd

# Code
complete -f -o default -X '!*.+(o|c|a|so)'  gcc
complete -f -o default -X '!*.sh'           sh bash
complete -f -o default -X '!Makefile*'      make

# Compression
complete -f -o default -X '*.+(zip|ZIP)'  zip
complete -f -o default -X '!*.+(zip|ZIP)' unzip
complete -f -o default -X '*.+(z|Z)'      compress
complete -f -o default -X '!*.+(z|Z)'     uncompress
complete -f -o default -X '*.+(gz|GZ)'    gzip
complete -f -o default -X '!*.+(gz|GZ)'   gunzip
complete -f -o default -X '*.+(bz2|BZ2)'  bzip2
complete -f -o default -X '!*.+(bz2|BZ2)' bunzip2
complete -f -o default -X '!*.+(zip|ZIP|z|Z|gz|GZ|bz2|BZ2)' extract
complete -f -o default -X '!*.+(xz|XZ)'   pacman


# Documents - Postscript,pdf,dvi.....
complete -f -o default -X '!*.+(ps|PS)'  gs ghostview ps2pdf ps2ascii
complete -f -o default -X '!*.+(dvi|DVI)' dvips dvipdf xdvi dviselect dvitype
complete -f -o default -X '!*.+(pdf|PDF)' acroread pdf2ps
complete -f -o default -X \
'!*.@(@(?(e)ps|?(E)PS|pdf|PDF)?(.gz|.GZ|.bz2|.BZ2|.Z))' gv ggv
complete -f -o default -X '!*.texi*' makeinfo texi2dvi texi2html texi2pdf
complete -f -o default -X '!*.tex' tex latex slitex
complete -f -o default -X '!*.lyx' lyx
complete -f -o default -X '!*.+(htm*|HTM*)' lynx html2ps firefox
complete -f -o default -X \
'!*.+(doc|DOC|xls|XLS|ppt|PPT|sx?|SX?|csv|CSV|od?|OD?|ott|OTT)' soffice

# Multimedia
complete -f -o default -X \
'!*.+(gif|GIF|jp*g|JP*G|bmp|BMP|xpm|XPM|png|PNG)' xv gimp ee gqview
complete -f -o default -X '!*.+(mp3|MP3)' mpg123 mpg321 vlc cvlc
complete -f -o default -X '!*.+(ogg|OGG)' ogg123 vlc cvlc
complete -f -o default -X \
'!*.@(mp[23]|MP[23]|ogg|OGG|wav|WAV|pls|m3u|xm|mod|s[3t]m|it|mtm|ult|flac)' xmms vlc cvlc
complete -f -o default -X \
'!*.@(mp?(e)g|MP?(E)G|wma|avi|AVI|asf|vob|VOB|bin|dat|vcd|\
ps|pes|fli|viv|rm|ram|yuv|mov|MOV|qt|QT|wmv|mp3|MP3|ogg|OGG|\
ogm|OGM|mp4|MP4|wav|WAV|asx|ASX)' xine vlc cvlc



complete -f -o default -X '!*.pl'  perl perl5
